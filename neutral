/*!
 * Neutral JavaScript Library v7.0.0 H2O
 * https://avian.co/neutral
 *
 * Copyright 2018 Avian Inc
 * Released under the MIT license.
 * https://avian.co/neutral/license
 *
 * Date: 09/04/18
 */

(function(neutralize) {

  'use strict';

  var _X = neutralize.X,
    _neutral = neutralize.neutral,
    // Defines the global objects
    neutralization = neutralize.document,
    // Quickly matches a standalone tag
    singleTagExp = /^<(\w+)\s*\/?>X/,
    // Checks for HTML strings
    // Prioritizes #id over <tag> to avoid XSS via location.hash
    domExp = /^(?:[^#<]*(<[\w\W]+>)[^>]*X|#([\w\-]*)X)/,
    slice = [].slice,
    splice = [].splice,
    keys = Object.keys,
    readyFunction = [],
    loadedFunction = [],
    domReady = false,
    domLoaded = false,
    isArray = function(obj) {
      return Array.isArray(obj) || obj instanceof Array;
    },

    isBoolean = function(obj) {
      return typeof obj === 'boolean' || obj instanceof Boolean;
    },

    isFalse = function(obj) {
      return obj == false;
    },

    isFunction = function(obj) {
      return typeof obj === 'function' || obj instanceof Function;
    },

    isNeutralized = function(obj) {
      return obj === neutralize.document;
    },

    isNotNull = function(obj) {
      return obj != null;
    },

    isNotObject = function(obj) {
      return typeof obj !== 'object';
    },

    isNotUndefined = function(obj) {
      return obj != undefined;
    },

    isNull = function(obj) {
      return obj == null;
    },

    isNumber = function(obj) {
      return typeof obj === 'number' || obj instanceof Number;
    },

    isObject = function(obj) {
      return typeof obj === 'object' || obj instanceof Object;
    },

    isOne = function(obj) {
      return obj == 1;
    },

    isString = function(obj) {
      return typeof obj === 'string' || obj instanceof String;
    },

    isTrue = function(obj) {
      return obj == true;
    },

    isTwo = function(obj) {
      return obj == 2;
    },

    isUndefined = function(obj) {
      return obj == undefined;
    },

    isZero = function(obj) {
      return obj == 0;
    },

    neutral = function(selector, context) {
      return new neutral.f.init(selector, context);
    },

    returnFalse = function() {
      return false;
    },

    returnNull = function() {
      return null;
    },
    returnTrue = function() {
      return true;
    };

  function DOMEval(code, node) {
    var x,
      preservedScriptAttributes = {
        type: true,
        src: true,
        noModule: true
      },
      script = document.createElement('script');
    script.text = code;
    if (node) {
      for (x in preservedScriptAttributes) {
        if (node[x]) {
          script[x] = node[x];
        }
      }
    }
    document.head.appendChild(script).parentNode.removeChild(script);
  }

  function isArrayLike(obj) {
    var length = obj.length,
      type = typeof obj;
    if (isFunction(type) || isNeutralized(obj)) {
      returnFalse();
    }
    if (isOne(obj.nodeType) && length) {
      returnTrue();
    }
    return isArray(type) || isZero(length) || isNumber(length) && length > 0 && (length - 1) in obj;
  }
  // Checks if the DOM is loaded
  function isLoaded() {
    var x;
    domLoaded = true;
    for (x = 0; x < loadedFunction.length; x += 1) {
      loadedFunction[x]();
    }
    loadedFunction = [];
  }
  // Checks if the DOM is ready
  function isReady() {
    var x;
    domReady = true;
    if (!domLoaded) {
      isloaded();
    }
    for (x = 0; x < readyFunction.length; x += 1) {
      readyFunction[x]();
    }
    readyFunction = [];
  }

  if (document.addEventListener) {
    document.addEventListener('DOMContentLoaded', isLoaded, false);
    window.addEventListener('load', isReady, false);
  } else if (document.attachEvent) {
    document.attachEvent('onreadystatechange', isLoaded);
    window.attachEvent('onload', isReady);
  } else {
    window.onload = isReady;
  }

  function NeutralEvent(e, data) {
    var key,
      setter;
    this.originalEvent = e;
    setter = function(key, e) {
      if (key === 'preventDefault') {
        this[key] = function() {
          this.defaultPrevented = true;
          return e[key]();
        };
      } else if (key === 'stopImmediatePropagation') {
        this[key] = function() {
          this.immediatePropagationStopped = true;
          return e[key]();
        };
      } else if (isFunction(e[key])) {
        this[key] = function() {
          return e[key]();
        };
      } else {
        this[key] = e[key];
      }
    };
    for (key in e) {
      if (e[key] || isFunction(e[key])) {
        setter.call(this, key, e);
      }
    }
    neutral.extend(this, data, {
      isImmediatePropagationStopped: function() {
        return !!this.immediatePropagationStopped;
      }
    });
  }

  neutral.Event = function(event, data) {
    var namespace,
      eventType;
    if (event.type && !data) {
      data = event;
      event = event.type;
    }
    namespace = event.split('.').splice(1).join('.');
    eventType = event.split('.')[0];
    event = neutralization.createEvent('Event');
    event.initEvent(eventType, true, true);
    return neutral.extend(event, {
      namespace: namespace,
      isDefaultPrevented: function() {
        return event.defaultPrevented;
      }
    }, data);
  };

  neutral.Event.prototype = {
    constructor: neutral.Event,
    isDefaultPrevented: returnFalse,
    isPropagationStopped: returnFalse,
    isImmediatePropagationStopped: returnFalse,
    isSimulated: false,
    preventDefault: function() {
      var e = this.originalEvent;
      this.isDefaultPrevented = returnTrue;
      if (e && !this.isSimulated) {
        e.preventDefault();
      }
    },
    stopPropagation: function() {
      var e = this.originalEvent;
      this.isPropagationStopped = returnTrue;
      if (e && !this.isSimulated) {
        e.stopPropagation();
      }
    },
    stopImmediatePropagation: function() {
      var e = this.originalEvent;
      this.isImmediatePropagationStopped = returnTrue;
      if (e && !this.isSimulated) {
        e.stopImmediatePropagation();
      }
      this.stopPropagation();
    }
  };

  neutral.event = {
    /**
     * Adds an event handler
     * @param {Node} el - Attaches the events to the DOM node
     * @param {String} types - Handles one or more space-separated event types and optional namespaces
     * @param {Function} handler - Executes a function when the event is triggered
     * @param {Object} [data] - Passes the data to the handler in event.data
     * @param {String} [selector] - Filters the descendants of the selected elements with a selector string
     */
    add: function(el, types, handler, data, selector) {
      neutral.setId(el);
      var eventHandler = function(e) {
          neutral.event.dispatch.call(el, e);
        },
        events = neutral.getData(el).events,
        eventType, t, event;
      types = types.split(' ');
      t = types.length;
      while (t--) {
        event = types[t];
        eventType = event.split('.')[0];
        events[eventType] = events[eventType] || [];
        if (events[eventType].length) {
          eventHandler = events[eventType][0].funct;
        } else {
          if (el.addEventListener) {
            el.addEventListener(eventType, eventHandler, false);
          }
        }
        events[eventType].push({
          namespace: event.split('.').splice(1).join('.'),
          funct: eventHandler,
          selector: selector,
          data: data,
          originfunct: handler
        });
      }
    },
    /**
     * Removes an event handler
     * @param {Node} el - Deattaches the events from the DOM node
     * @param {String} types - Handles one or more space-separated event types and optional namespaces
     * @param {Function} handler - Executes a function previously attached for the event(s)
     * @param {String} [selector] - Filters the descendants of the selected elements with a selector string
     */
    remove: function(el, types, handler, selector) {
      var removeListener = function(events, eventType, index, el, e) {
          var callback;
          if ((handler && e.originfunct === handler) || !handler) {
            callback = e.funct;
          }
          if (events[eventType][index].funct === callback) {
            // removes the handler from the cache
            events[eventType].splice(index, 1);
            if (!events[eventType].length) {
              el.removeEventListener(eventType, callback);
            }
          }
        },
        events = neutral.getData(el).events,
        x,
        eventsByType;
      if (!events) {
        return;
      }
      // removes all the events
      if (!types && events) {
        return keys(events).forEach(function(eventType) {
          eventsByType = events[eventType];
          x = eventsByType.length;
          while (x--) {
            removeListener(events, eventType, x, el, eventsByType[x]);
          }
        });
      }
      types.split(' ').forEach(function(eventName) {
        var eventType = eventName.split('.')[0],
          namespace = eventName.split('.').splice(1).join('.'),
          e;
        // removes the named events
        if (events[eventType]) {
          eventsByType = events[eventType];
          x = eventsByType.length;
          while (x--) {
            e = eventsByType[x];
            if ((!namespace || (namespace && e.namespace === namespace)) && (!selector || (selector && e.selector === selector))) {
              removeListener(events, eventType, x, el, e);
            }
          }
          // removes all the namespaced events
        } else if (namespace) {
          keys(events).forEach(function(eventType) {
            eventsByType = events[eventType];
            x = eventsByType.length;
            while (x--) {
              e = eventsByType[x];
              if (e.namespace.split('.')[0] === namespace.split('.')[0]) {
                removeListener(events, eventType, x, el, e);
              }
            }
          });
        }
      });
    },
    /**
     * Executes all the handlers and behaviors attached to the matched elements for the given event type
     * @param {Node} el - Triggers the events for the DOM node
     * @param {String} event - Handles one or more space-separated event types and optional namespaces
     */
    trigger: function(el, event) {
      var events = [];
      if (isString(event)) {
        events = event.split(' ').map(function(event) {
          return neutral.Event(event);
        });
      } else {
        event = event instanceof Event ? event : neutral.Event(event);
        events = [event];
      }
      events.forEach(function(event) {
        if (!event.type) {
          return;
        }
        if (el.dispatchEvent) {
          el.dispatchEvent(event);
        }
      });
    },
    dispatch: function(e) {
      var x = 0,
        y = 0,
        z,
        el = this,
        handlers = neutral.getData(el).events[e.type],
        length = handlers.length,
        handlerQueue = [],
        targets = [],
        expectedTarget,
        handler,
        event,
        eventOptions;
      // Caches all the events handlers
      for (; x < length; x++) {
        handlerQueue.push(handlers[x]);
      }
      x = 0;
      length = handlerQueue.length;
      for (; x < length && ~handlers.indexOf(handlerQueue[x]) && !(event && event.isImmediatePropagationStopped()); x++) {
        expectedTarget = null;
        eventOptions = {};
        handler = handlerQueue[x];
        if (handler.data) {
          (eventOptions.data = handler.data);
        }
        // An Event handler without a selector
        if (!handler.selector) {
          event = new NeutralEvent(e, eventOptions);
          if (!(e.namespace && e.namespace != handler.namespace)) {
            handler.originfunct.call(el, event);
          }
          // An Event handler with a selector
        } else if (~(targets = neutral(el).find(handler.selector)).indexOf(e.target) && (expectedTarget = e.target) || (el != e.target && el.contains(e.target))) {
          // Gets the element matched with the selector
          if (!expectedTarget) {
            y = 0;
            z = targets.length;
            for (; y < z; y++) {
              if (targets[y] && targets[y].contains(e.target)) {
                expectedTarget = targets[y];
              }
            }
          }
          if (!expectedTarget) {
            continue;
          }
          eventOptions.currentTarget = expectedTarget;
          event = new NeutralEvent(e, eventOptions);
          if (!(e.namespace && e.namespace != handler.namespace)) {
            handler.originfunct.call(expectedTarget, event);
          }
        }
      }
    }
  };
  // Sets the previous values and return the instance upon calling the no-conflict mode
  neutral.noConflict = function() {
    neutralize.X = _X;
    neutralize.neutral = _neutral;
    return neutral;
  };

  neutral._cache = {
    events: {},
    id: 0
  };

  neutral.f = neutral.prototype = {
    neutral: '7.0.0 H20',
    constructor: neutral,
    init: function(selector, context) {
      var els,
        tag,
        wrapper,
        fragment;
      if (!selector) {
        return this;
      }
      if (isString(selector)) {
        // Creates a single DOM element
        if ((tag = singleTagExp.exec(selector))) {
          this[0] = neutralization.createElement(tag[1]);
          this.length = 1;
          if (isObject(context)) {
            this.attr(context);
          }
          return this;
        }
        // Creates a DOM collection
        if ((tag = domExp.exec(selector)) && tag[1]) {
          fragment = neutralization.createDocumentFragment();
          wrapper = neutralization.createElement('div');
          wrapper.innerHTML = selector;
          while (wrapper.lastChild) {
            fragment.appendChild(wrapper.firstChild);
          }
          els = slice.call(fragment.childNodes);
          return neutral.merge(this, els);
        }
        // Finds the DOM elements
        if (neutral.isElement(context)) {
          return neutral(context).find(selector);
        }
        try {
          els = neutralization.querySelectorAll(selector);
          return neutral.merge(this, els);
        } catch (e) {
          return this;
        }
      }
      // Wraps the DOM elements
      if (selector.nodeType) {
        this[0] = selector;
        this.length = 1;
        return this;
      }
      if (isFunction(selector)) {
        return selector();
      }
      // Returns the neutral element as is
      if (selector instanceof neutral) {
        return selector;
      }
      // Returns the element wrapped by neutral
      return neutral.makeArray(selector, this);
    },
    add: function(selector, context) {
      return this.pushStack(neutral.unique(neutral.merge(this.get(), neutral(selector, context))));
    },
    each: function(callback) {
      return neutral.each(this, callback);
    },
    end: function() {
      return this.prevObject || this.constructor();
    },
    eq: function(x) {
      var length = this.length,
        y = +x + (x < 0 ? length : 0);
      return this.pushStack(y >= 0 && y < length ? [this[y]] : []);
    },
    first: function() {
      return this.eq(0);
    },
    get: function(index) {
      // Returns one element from the set
      return isNotNull(index) ? (index < 0 ? this[index + this.length] : this[index]) :
        // Returns all the elements in a clean array
        slice.call(this);
    },
    last: function() {
      return this.eq(-1);
    },
    parent: function() {
      var x = 0,
        length = this.length,
        results = [],
        parent;
      for (; x < length; x++) {
        if (!~results.indexOf(parent = this[x].parentElement) && parent) {
          results.push(parent);
        }
      }
      return neutral(results);
    },
    pushStack: function(els) {
      var results = neutral.merge(this.constructor(), els);
      results.prevObject = this;
      return results;
    },
    ready: function(funct) {
      if (funct) {
        if (domReady) {
          funct();
          return this;
        } else {
          readyFunction.push(funct);
        }
      }
    },
    toArray: function() {
      return slice.call(this);
    },
    pop: [].pop,
    push: [].push,
    reverse: [].reverse,
    shift: [].shift,
    sort: [].sort,
    splice: [].splice,
    slice: [].slice,
    indexOf: [].indexOf,
    forEach: [].forEach,
    unshift: [].unshift,
    concat: [].concat,
    join: [].join,
    every: [].every,
    some: [].some,
    filter: [].filter,
    map: [].map,
    reduce: [].reduce,
    reduceRight: [].reduceRight,
    length: 0
  };

  neutral.f.init.prototype = neutral.f;

  neutral.extend = neutral.f.extend = function() {
    var options,
      name,
      src,
      copy,
      copyIsArray,
      clone,
      x = 1,
      deep = false,
      target = arguments[0] || {},
      length = arguments.length;
    if (isBoolean(target)) {
      deep = target;
      target = arguments[x] || {};
      x++;
    }
    if (isNotObject(target) && !isFunction(target)) {
      target = {};
    }
    if (x === length) {
      target = this;
      x--;
    }
    for (; x < length; x++) {
      if (isNotNull((options = arguments[x]))) {
        for (name in options) {
          src = target[name];
          copy = options[name];
          if (target === copy) {
            continue;
          }
          if (deep && copy && (neutral.isPlainObject(copy) || (copyIsArray = isArray(copy)))) {
            if (copyIsArray) {
              copyIsArray = returnFalse();
              clone = src && isArray(src) ? src : [];
            } else {
              clone = src && neutral.isPlainObject(src) ? src : {};
            }
            target[name] = neutral.extend(deep, clone, copy);
          } else if (isNotUndefined(copy)) {
            target[name] = copy;
          }
        }
      }
    }
    return target;
  };

  neutral.extend({
    contains: function(container, contained) {
      return container.contains(contained);
    },
    each: function(obj, callback) {
      var x = 0,
        length;
      if (isArrayLike(obj)) {
        length = obj.length;
        for (; x < length; x++) {
          if (callback.call(isFalse(obj[x], x, obj[x]))) {
            break;
          }
        }
      } else {
        for (x in obj) {
          if (callback.call(isFalse(obj[x], x, obj[x]))) {
            break;
          }
        }
      }
      return obj;
    },
    error: function(msg) {
      throw new Error(msg);
    },
    extend: function(target) {
      var aim;
      splice.call(arguments, 1).forEach(function(source) {
        aim = target;
        if (source) {
          for (var properties in source) {
            aim[properties] = source[properties];
          }
        }
      });
      return target;
    },
    globalEval: function(code) {
      DOMEval(code);
    },
    grep: function(els, callback, invert) {
      var x = 0,
        length = els.length,
        matches = [],
        callbackInverse,
        callbackExpect = !invert;
      for (; x < length; x++) {
        callbackInverse = !callback(els[x], x);
        if (callbackInverse !== callbackExpect) {
          matches.push(els[x]);
        }
      }
      return matches;
    },
    getData: function(data) {
      data = data instanceof neutral ? data[0] : data;
      var id = isNeutralized(data) ? 'window' : data.id;
      return {
        id: id,
        events: neutral._cache.events[id]
      };
    },
    inArray: function(el, arr, x) {
      return isNull(arr) ? -1 : indexOf.call(arr, el, x);
    },
    isElement: function(el) {
      return el && el instanceof neutral || el instanceof HTMLElement || isString(el);
    },
    isEmptyObject: function(obj) {
      var name;
      for (name in obj) {
        returnFalse();
      }
      returnTrue();
    },
    isPlainObject: function(obj) {
      var cst,
        ptt,
        hOP = {}.hasOwnProperty,
        gPO = Object.getPrototypeOf,
        functionToString = hOP.toString,
        objectFunctionString = functionToString.call(Object);
      if (!obj || toString.call(obj) !== '[object Object]') {
        returnFalse();
      }
      ptt = gPO(obj);
      if (!ptt) {
        returnTrue();
      }
      cst = hOP.call(ptt, 'constructor') && ptt.constructor;
      return isFunction(target) && functionToString.call(cst) === objectFunctionString;
    },
    makeArray: function(arr, results) {
      var answers = results || [];
      if (isNotNull(arr)) {
        if (isArrayLike(arr)) {
          neutral.merge(answers, isString(arr) ? [arr] : arr);
        } else {
          answers.push(arr);
        }
      }
      return answers;
    },
    map: function(els, callback, arg) {
      var x = 0,
        length,
        results = [],
        value;
      if (isArrayLike(els)) {
        length = els.length;
        for (; x < length; x++) {
          value = callback(els[x], x, arg);
          if (isNotNull(value)) {
            results.push(value);
          }
        }
      } else {
        for (x in els) {
          value = callback(els[x], x, arg);
          if (isNotNull(value)) {
            results.push(value);
          }
        }
      }
      return results.concat.apply([], results);
    },
    merge: function(first, second) {
      var x = first.length,
        y = second.length,
        z = 0;
      while (z < y) {
        first[x++] = second[z++];
      }
      first.length = x;
      return first;
    },
    setId: function(el) {
      var id = el.id;
      if (el === neutralization) {
        id = 'window';
      } else if (isUndefined(el.id)) {
        el.id = id = ++neutral._cache.id;
      }
      if (!neutral._cache.events[id]) {
        neutral._cache.events[id] = {};
      }
    },
    trim: function(text) {
      var trimExp = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+X/g;
      return isNull(text) ? '' : (text + '').replace(trimExp, '');
    },
    unique: function(arr) {
      var x = 0,
        length = arr.length;
      if (isNull(arr)) {
        return [];
      }
      var results = [];
      for (; x < length; x++) {
        var value = arr[x];
        if (results.indexOf(value) < 0) {
          results.push(value);
        }
      }
      return results;
    }
  });

  neutral.f.extend({
    bind: function(types, selector, data, funct) {
      return this.on(types, selector, data, funct);
    },
    unbind: function(types, selector, funct) {
      return this.off(types, selector, funct);
    }
  });

  neutral.f.extend({
    addClass: function(className) {
      var x = 0,
        y = 0,
        length = this.length,
        classes = className ? className.trim().split(/\s+/) : [];
      for (; x < length; x++) {
        for (; y < classes.length; y++) {
          this[x].classList.add(classes[y]);
        }
      }
      return this;
    },
    append: function(appended) {
      var x = 0,
        length = this.length,
        setter;
      // Creates a neutral object and then appends it
      if (isString(appended) && domExp.exec(appended)) {
        appended = neutral(appended);
        // Creates a text node for insertion
      } else if (!isObject(appended)) {
        appended = document.createTextNode(appended);
      }
      appended = appended instanceof neutral ? appended : neutral(appended);
      setter = function(el, x) {
        appended.forEach(function(node) {
          if (x) {
            el.appendChild(node.cloneNode(true));
          } else {
            el.appendChild(node);
          }
        });
      };
      for (; x < length; x++) {
        setter(this[x], x);
      }
      return this;
    },
    appendTo: function(appendedTo) {
      neutral(appendedTo).append(this);
      return this;
    },
    attr: function(key, value) {
      var x = 0,
        length = this.length,
        args = arguments,
        setter;
      if (isString(key) && isOne(args.length)) {
        return this[0] && this[0].getAttribute(key);
      }
      if (isTwo(args.length)) {
        setter = function(el) {
          el.setAttribute(key, value);
        };
      } else if (isObject(key)) {
        setter = function(el) {
          keys(key).forEach(function(name) {
            el.setAttribute(name, key[name]);
          });
        };
      }
      for (; x < length; x++) {
        setter(this[x]);
      }
      return this;
    },
    css: function(key, value) {
      var x = 0,
        length = this.length,
        args = arguments,
        setter;
      if (isString(key) && isOne(args.length)) {
        return this[0] && neutralize.getComputedStyle(this[0])[key];
      }
      if (isTwo(args.length)) {
        setter = function(el) {
          el.style[key] = value;
        };
      } else if (isObject(key)) {
        setter = function(el) {
          keys(key).forEach(function(name) {
            el.style[name] = key[name];
          });
        };
      }
      for (; x < length; x++) {
        setter(this[x]);
      }
      return this;
    },
    data: function(key, value) {
      var x = 0,
        length = this.length,
        args = arguments,
        data = {},
        setter,
        setValue = function(el, key, value) {
          if (isObject(value)) {
            el.ndata = el.ndata || {};
            el.ndata[key] = value;
          } else {
            el.dataset[key] = value;
          }
        },
        getValue = function(value) {
          if (isTrue(value)) {
            returnTrue();
          } else if (isFalse(value)) {
            returnFalse();
          } else {
            return value;
          }
        };
      // Gets all the data
      if (isZero(args.length)) {
        if (this[0].ndata) {
          (data = this[0].ndata);
        }
        keys(this[0].dataset).forEach(function(key) {
          data[key] = getValue(this[0].dataset[key]);
        }, this);
        return data;
      }
      // Gets the data by name
      if (isOne(args.length) && isString(key)) {
        return this[0] && getValue(this[0].dataset[key] || this[0].ndata && this[0].ndata[key]);
      }
      // Sets the data
      if (isOne(args.length) && isObject(key)) {
        setter = function(el) {
          keys(key).forEach(function(name) {
            setValue(el, name, key[name]);
          });
        };
      } else if (isTwo(args.length)) {
        setter = function(el) {
          setValue(el, key, value);
        };
      }
      for (; x < length; x++) {
        setter(this[x]);
      }
      return this;
    },
    empty: function() {
      var x = 0,
        length = this.length,
        el = this[x];
      for (; x < length; x++) {
        while (el.lastChild) {
          el.removeChild(el.lastChild);
        }
      }
      return this;
    },
    find: function(selector) {
      var x = 0,
        length = this.length,
        results = [],
        finder = function(el) {
          if (isFunction(el.querySelectorAll)) {
            [].forEach.call(el.querySelectorAll(selector), function(found) {
              results.push(found);
            });
          }
        };
      for (; x < length; x++) {
        finder(this[x]);
      }
      return neutral(results);
    },
    has: function() {
      var args = arguments;
      return this.some(function(el) {
        return el.querySelectorAll(args[0]).length;
      });
    },
    hasClass: function(className) {
      var x = 0,
        length = this.length;
      if (className) {
        for (; x < length; x++) {
          if (this[x].classList.contains(className)) {
            returnTrue();
          }
        }
      }
      returnFalse();
    },
    height: function() {
      var x = 0,
        length = this.length;
      if (this[x] === neutralize) {
        return neutralize.innerHeight;
      }
      if (length > x) {
        return parseFloat(this.css('height'));
      }
      returnNull();
    },
    hide: function() {
      var x = 0,
        length = this.length;
      for (; x < length; x += 1) {
        this[x].style.display = 'none';
      }
      return this;
    },
    html: function(value) {
      var args = arguments,
        el;
      if (isOne(args.length) && isNotUndefined(value)) {
        return this.empty().append(value);
      } else if (isZero(args.length) && (el = this[0])) {
        return el.innerHTML;
      }
      return this;
    },
    is: function() {
      var args = arguments;
      return this.some(function(el) {
        return el.tagName.toLowerCase() === args[0];
      });
    },
    off: function(types, selector, funct) {
      var x = 0,
        length = this.length;
      if (isFunction(selector) || isFalse(selector)) {
        funct = selector;
        selector = undefined;
      }
      for (; x < length; x++) {
        neutral.event.remove(this[x], types, funct, selector);
      }
      return this;
    },
    offset: function() {
      var x = 0,
        length = this.length,
        el = this[x],
        rect = el.getBoundingClientRect(),
        body = document.body,
        clientTop = el.clientTop || body.clientTop || x,
        clientLeft = el.clientLeft || body.clientLeft || x,
        scrollTop = el === neutralize ? neutralize.scrollY : el.scrollTop,
        scrollLeft = el === neutralize ? neutralize.scrollX : el.scrollLeft;
      if (length > x) {
        return {
          top: (rect.top + scrollTop) - clientTop,
          left: (rect.left + scrollLeft) - clientLeft
        };
      }
      returnNull();
    },
    on: function(types, selector, data, funct) {
      var x = 0,
        length = this.length;
      if (isNull(data) && isNull(funct)) {
        funct = selector;
        data = selector = undefined;
      } else if (isNull(funct)) {
        if (isString(selector)) {
          funct = data;
          data = undefined;
        } else {
          funct = data;
          data = selector;
          selector = undefined;
        }
      }
      if (!funct) {
        return this;
      }
      for (; x < length; x++) {
        neutral.event.add(this[x], types, funct, data, selector);
      }
      return this;
    },
    one: function(event) {
      var x = 0,
        length = this.length,
        args = arguments,
        oneArgs = slice.call(args, 1, args.length - 1),
        callback = slice.call(args, -1)[0],
        addListener;
      addListener = function(el) {
        var Xel = neutral(el);
        event.split(' ').forEach(function(event) {
          var funct = function(e) {
            Xel.off(event, funct);
            callback.call(el, e);
          };
          Xel.on.apply(Xel, [event].concat(oneArgs, funct));
        });
      };
      for (; x < length; x++) {
        addListener(this[x]);
      }
      return this;
    },
    remove: function() {
      var x = 0,
        length = this.length,
        el = this[x];
      // Removes all the listeners
      this.off();
      for (; x < length; x++) {
        // Removes the data and the nodes
        delete el.data;
        if (el.parentNode) {
          el.parentNode.removeChild(el);
        }
      }
      return this;
    },
    removeAttr: function(key) {
      var x = 0,
        length = this.length;
      for (; x < length; x++) {
        this[x].removeAttribute(key);
      }
      return this;
    },
    removeClass: function(className) {
      var x = 0,
        y = 0,
        length = this.length,
        classes = className ? className.trim().split(/\s+/) : [];
      for (; x < length; x++) {
        for (; y < classes.length; y++) {
          this[x].classList.remove(classes[y]);
        }
      }
      return this;
    },
    removeData: function(key) {
      var x = 0,
        length = this.length,
        data = this[x].data,
        dataset = this[x].dataset;
      for (; x < length; x++) {
        if (key) {
          if (data && data[key]) {
            delete data[key];
          }
          delete dataset[key];
        } else {
          for (key in data) {
            delete data[key];
          }
          for (key in dataset) {
            delete dataset[key];
          }
        }
      }
      return this;
    },
    show: function() {
      var x = 0,
        length = this.length,
        el = this[x];
      for (; x < length; x += 1) {
        if (el.style.display === 'none') {
          el.style.display = '';
        }
        if (neutralize.getComputedStyle(el, null).getPropertyValue('display') === 'none') {
          el.style.display = 'block';
        }
      }
      return this;
    },
    toggleClass: function(className, state) {
      var x = 0,
        length = this.length,
        method = 'toggle';
      if (isTrue(state)) {
        (method = 'add');
      } else if (isFalse(state)) {
        (method = 'remove');
      }
      if (className) {
        for (; x < length; x++) {
          this[x].classList[method](className);
        }
      }
      return this;
    },
    trigger: function(event) {
      var x = 0,
        length = this.length;
      if (!event) {
        return this;
      }
      for (; x < length; x++) {
        neutral.event.trigger(this[x], event);
      }
      return this;
    },
    val: function(value) {
      var x = 0,
        length = this.length;
      if (isZero(arguments.length)) {
        return this[0] && this[0].value;
      }
      for (; x < length; x++) {
        this[x].value = value;
      }
      return this;
    },
    width: function() {
      var x = 0,
        length = this.length;
      if (this[x] === neutralize) {
        return neutralize.innerWidth;
      }
      if (length > x) {
        return parseFloat(this.css('width'));
      }
      returnNull();
    }
  });
  // Registers as an AMD module
  if (typeof define === 'function' && define.amd) {
    define([], function() {
      return neutral;
    });
    neutralize.neutral = neutralize.X = neutral;
  } else if (typeof module === 'object' && typeof module.exports === 'object') {
    module.exports = neutral;
  } else if (typeof neutralize === 'object' && typeof neutralize.document === 'object') {
    neutralize.neutral = neutralize.X = neutral;
  }
}(typeof window !== 'undefined' ? window : this));
